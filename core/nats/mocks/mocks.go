// Code generated by MockGen. DO NOT EDIT.
// Source: pubsub.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"

	subj "github.com/alexykot/cncraft/core/nats/subj"
	envelope "github.com/alexykot/cncraft/pkg/envelope"
)

// MockPubSub is a mock of PubSub interface
type MockPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubMockRecorder
}

// MockPubSubMockRecorder is the mock recorder for MockPubSub
type MockPubSubMockRecorder struct {
	mock *MockPubSub
}

// NewMockPubSub creates a new mock instance
func NewMockPubSub(ctrl *gomock.Controller) *MockPubSub {
	mock := &MockPubSub{ctrl: ctrl}
	mock.recorder = &MockPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPubSub) EXPECT() *MockPubSubMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockPubSub) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start
func (mr *MockPubSubMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPubSub)(nil).Start), ctx)
}

// Publish mocks base method
func (m *MockPubSub) Publish(subj subj.Subj, messages ...*envelope.E) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{subj}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockPubSubMockRecorder) Publish(subj interface{}, messages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{subj}, messages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSub)(nil).Publish), varargs...)
}

// Subscribe mocks base method
func (m *MockPubSub) Subscribe(subj subj.Subj, handleFunc func(*envelope.E)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", subj, handleFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockPubSubMockRecorder) Subscribe(subj, handleFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSub)(nil).Subscribe), subj, handleFunc)
}

// Unsubscribe mocks base method
func (m *MockPubSub) Unsubscribe(subj subj.Subj) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", subj)
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockPubSubMockRecorder) Unsubscribe(subj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockPubSub)(nil).Unsubscribe), subj)
}

// MocknatsServer is a mock of natsServer interface
type MocknatsServer struct {
	ctrl     *gomock.Controller
	recorder *MocknatsServerMockRecorder
}

// MocknatsServerMockRecorder is the mock recorder for MocknatsServer
type MocknatsServerMockRecorder struct {
	mock *MocknatsServer
}

// NewMocknatsServer creates a new mock instance
func NewMocknatsServer(ctrl *gomock.Controller) *MocknatsServer {
	mock := &MocknatsServer{ctrl: ctrl}
	mock.recorder = &MocknatsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocknatsServer) EXPECT() *MocknatsServerMockRecorder {
	return m.recorder
}

// ConfigureLogger mocks base method
func (m *MocknatsServer) ConfigureLogger() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConfigureLogger")
}

// ConfigureLogger indicates an expected call of ConfigureLogger
func (mr *MocknatsServerMockRecorder) ConfigureLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLogger", reflect.TypeOf((*MocknatsServer)(nil).ConfigureLogger))
}

// Start mocks base method
func (m *MocknatsServer) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MocknatsServerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MocknatsServer)(nil).Start))
}

// Shutdown mocks base method
func (m *MocknatsServer) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown
func (mr *MocknatsServerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MocknatsServer)(nil).Shutdown))
}

// ReadyForConnections mocks base method
func (m *MocknatsServer) ReadyForConnections(arg0 time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadyForConnections", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ReadyForConnections indicates an expected call of ReadyForConnections
func (mr *MocknatsServerMockRecorder) ReadyForConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadyForConnections", reflect.TypeOf((*MocknatsServer)(nil).ReadyForConnections), arg0)
}
