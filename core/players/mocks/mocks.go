// Code generated by MockGen. DO NOT EDIT.
// Source: roster.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"

	players "github.com/alexykot/cncraft/core/players"
	data "github.com/alexykot/cncraft/pkg/game/data"
)

// MockRoster is a mock of Roster interface
type MockRoster struct {
	ctrl     *gomock.Controller
	recorder *MockRosterMockRecorder
}

// MockRosterMockRecorder is the mock recorder for MockRoster
type MockRosterMockRecorder struct {
	mock *MockRoster
}

// NewMockRoster creates a new mock instance
func NewMockRoster(ctrl *gomock.Controller) *MockRoster {
	mock := &MockRoster{ctrl: ctrl}
	mock.recorder = &MockRosterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoster) EXPECT() *MockRosterMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockRoster) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start
func (mr *MockRosterMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockRoster)(nil).Start), ctx)
}

// AddPlayer mocks base method
func (m *MockRoster) AddPlayer(username string, connID, dimensionID uuid.UUID) (*players.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", username, connID, dimensionID)
	ret0, _ := ret[0].(*players.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlayer indicates an expected call of AddPlayer
func (mr *MockRosterMockRecorder) AddPlayer(username, connID, dimensionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockRoster)(nil).AddPlayer), username, connID, dimensionID)
}

// GetPlayerByConnID mocks base method
func (m *MockRoster) GetPlayerByConnID(connID uuid.UUID) (*players.Player, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerByConnID", connID)
	ret0, _ := ret[0].(*players.Player)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPlayerByConnID indicates an expected call of GetPlayerByConnID
func (mr *MockRosterMockRecorder) GetPlayerByConnID(connID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerByConnID", reflect.TypeOf((*MockRoster)(nil).GetPlayerByConnID), connID)
}

// GetPlayerIDByConnID mocks base method
func (m *MockRoster) GetPlayerIDByConnID(connID uuid.UUID) (uuid.UUID, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayerIDByConnID", connID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPlayerIDByConnID indicates an expected call of GetPlayerIDByConnID
func (mr *MockRosterMockRecorder) GetPlayerIDByConnID(connID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayerIDByConnID", reflect.TypeOf((*MockRoster)(nil).GetPlayerIDByConnID), connID)
}

// SetPlayerSpatial mocks base method
func (m *MockRoster) SetPlayerSpatial(connID uuid.UUID, position *data.PositionF, rotation *data.RotationF, onGround *bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPlayerSpatial", connID, position, rotation, onGround)
}

// SetPlayerSpatial indicates an expected call of SetPlayerSpatial
func (mr *MockRosterMockRecorder) SetPlayerSpatial(connID, position, rotation, onGround interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlayerSpatial", reflect.TypeOf((*MockRoster)(nil).SetPlayerSpatial), connID, position, rotation, onGround)
}

// SetPlayerHeldItem mocks base method
func (m *MockRoster) SetPlayerHeldItem(connID uuid.UUID, heldItem uint8) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPlayerHeldItem", connID, heldItem)
}

// SetPlayerHeldItem indicates an expected call of SetPlayerHeldItem
func (mr *MockRosterMockRecorder) SetPlayerHeldItem(connID, heldItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPlayerHeldItem", reflect.TypeOf((*MockRoster)(nil).SetPlayerHeldItem), connID, heldItem)
}

// PlayerInventoryChanged mocks base method
func (m *MockRoster) PlayerInventoryChanged(connID uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PlayerInventoryChanged", connID)
}

// PlayerInventoryChanged indicates an expected call of PlayerInventoryChanged
func (mr *MockRosterMockRecorder) PlayerInventoryChanged(connID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerInventoryChanged", reflect.TypeOf((*MockRoster)(nil).PlayerInventoryChanged), connID)
}
